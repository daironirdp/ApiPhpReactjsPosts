{"version":3,"sources":["Componente_twitter_post/SingleTweet.jsx","Componente_twitter_post/TweetList.jsx","Componente_twitter_post/TweetBox.jsx","Componente_twitter_post/App.jsx","reportWebVitals.js","index.js"],"names":["SingleTweet","args","state","toogleEditar","tweetForm","cambiarEditar","bind","set_TweetForm","guardar","e","text","target","value","this","setState","preventDefault","props","tweet","fd","FormData","append","id","axios","post","apiUrl","then","response","data","updateTweets","result","alert","catch","error","console","log","to","className","style","marginLeft","time","textAlign","flex","onClick","path","exact","eliminar","Component","Eliminar","Editar","action","placeholder","width","onChange","type","disabled","length","float","TweetList","tweets","map","TweetBox","padding","background","borderRadius","boxSizing","overflow","onSubmit","postTweet","name","set_Tweet","App","newDatas","filter","cargarValores","date","array","objetoFinal","concat","get","form","reset","margin","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1cb4bcb2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from \"axios\"\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    Redirect,\r\n    // useRouteMatch,\r\n    //useParams,\r\n    //NavLink,\r\n    //Redirect\r\n} from \"react-router-dom\";\r\nclass SingleTweet extends Component {\r\n\r\n    constructor(args) {\r\n        super(args)\r\n        this.state = {\r\n            toogleEditar: false,\r\n            tweetForm: \"\"\r\n        }\r\n        this.cambiarEditar = this.cambiarEditar.bind(this)\r\n        this.set_TweetForm = this.set_TweetForm.bind(this)\r\n        this.guardar = this.guardar.bind(this)\r\n    }\r\n\r\n\r\n\r\n    set_TweetForm(e) {\r\n        const text = e.target.value\r\n\r\n        this.setState({\r\n            tweetForm: text\r\n        })\r\n\r\n\r\n    }\r\n    guardar(e) {\r\n        e.preventDefault()\r\n\r\n        if (this.state.tweetForm !== this.props.tweet) {\r\n\r\n            var fd = new FormData()\r\n            fd.append(\"id\", this.props.id)\r\n            fd.append(\"tweet\", this.state.tweetForm)\r\n            axios\r\n                .post(this.props.apiUrl + \"updatetweet.php\", fd)\r\n                .then((response) => {\r\n                    if (response.data.response === \"success\") {\r\n\r\n                        this.props.updateTweets(this.props.id, this.state.tweetForm, response.data.result)\r\n                        this.setState({\r\n                            toogleEditar: !this.state.toogleEditar\r\n                        })\r\n                    } else {\r\n\r\n                        alert(\"Error: \" + response.data.result)\r\n\r\n                    }\r\n                })\r\n                .catch(error => (console.log(error)))\r\n            return (\r\n                <Redirect to=\"/\" />)\r\n\r\n        } else {\r\n            alert(\"son iguales\")\r\n        }\r\n\r\n    }\r\n\r\n    cambiarEditar() {\r\n\r\n        this.setState({\r\n            toogleEditar: !this.state.toogleEditar,\r\n            tweetForm: (this.state.toogleEditar) ? \"\" : this.props.tweet\r\n        })\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"tweet\">\r\n                <div style={{}}><p>{this.props.tweet}</p></div>\r\n                <div style={{ marginLeft: \"auto\" }}> {this.props.time}</div>\r\n\r\n\r\n                <div style={{ textAlign: \"center\", flex: \"1 1 100%\" }} >\r\n                    <Router>\r\n\r\n                        <Link onClick={this.cambiarEditar} className=\"botones\" to=\"/editar\">Editar</Link>\r\n                        <Link className=\"botones\" to=\"/eliminar\">Eliminar</Link>\r\n\r\n\r\n                        <Switch>\r\n                            <Route path=\"/eliminar\" exact>\r\n\r\n                                <Eliminar\r\n\r\n                                    id={this.props.id}\r\n                                    apiUrl={this.props.apiUrl}\r\n                                    eliminar={this.props.eliminar}\r\n                                />\r\n\r\n                            </Route>\r\n\r\n                            <Route path=\"/editar\" exact>\r\n\r\n                                <Editar\r\n                                    id={this.props.id}\r\n                                    tweet={this.state.tweetForm}\r\n                                    toogleEditar={this.state.toogleEditar}\r\n                                    set_TweetForm={this.set_TweetForm}\r\n                                    guardar={this.guardar}\r\n                                />\r\n\r\n                            </Route>\r\n                        </Switch>\r\n                    </Router>\r\n\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst Eliminar = (props) => {\r\n    var fd = new FormData()\r\n    fd.append(\"id\", props.id)\r\n    axios\r\n        .post(props.apiUrl + \"deletetweet.php\", fd)\r\n        .then((response) => {\r\n            if (response.data.response === \"success\") {\r\n\r\n                props.eliminar(props.id)\r\n            } else {\r\n\r\n                alert(\"Error: \" + response.data.result)\r\n\r\n            }\r\n        })\r\n        .catch(error => (console.log(error)))\r\n    return (\r\n        <Redirect to=\"/\" />\r\n    )\r\n}\r\n\r\nconst Editar = (props) => {\r\n\r\n\r\n\r\n    if (props.toogleEditar) {\r\n        return (\r\n            <form action=\"\" className=\"editar\">\r\n                <textarea\r\n                    placeholder=\"Rewrite your tweet here\"\r\n                    value={props.tweet}\r\n                    style={{ width: \"90%\" }}\r\n                    onChange={props.set_TweetForm}\r\n                >\r\n\r\n                </textarea>\r\n                <button\r\n                    onClick={props.guardar}\r\n                    type=\"submit\"\r\n                    disabled={props.tweet.length > 0 ? false : true}\r\n                    style={{ float: \"right\" }}\r\n                >Guardar</button>\r\n            </form>\r\n\r\n        )\r\n\r\n    } else {\r\n        return (\r\n            <Redirect to=\"/\" />\r\n        )\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default SingleTweet","import React from 'react';\r\nimport SingleTweet from \"./SingleTweet\"\r\nconst TweetList = (props) => (\r\n    <div id=\"tweetList\">\r\n\r\n        {\r\n            (props.tweets !== false) ? props.tweets.map(tweet => (\r\n                <div className=\"Singletweet\" key={tweet.id}  >\r\n\r\n                    <SingleTweet\r\n                        id={tweet.id}\r\n                        tweet={tweet.tweet}\r\n                        time={tweet.time}\r\n                        apiUrl={props.apiUrl}\r\n                        eliminar={props.eliminar}\r\n                        updateTweets={props.updateTweets}\r\n                        \r\n\r\n                    />\r\n\r\n\r\n\r\n\r\n                </div>\r\n\r\n            )) : <div>No hay Tweets disponibles por el momento</div>\r\n\r\n        }\r\n    </div>\r\n)\r\nexport default TweetList","\r\nimport React from \"react\"\r\n\r\nconst TweetBox = (props) => {\r\n    return (\r\n        <div style={{\r\n            padding: \"10px\",\r\n            background: \"#4C9BE5\",\r\n            borderRadius: \"5px\",\r\n            boxSizing: \"border-box\",\r\n            overflow: \"hidden\"\r\n        }}>\r\n            <form onSubmit={props.postTweet}>\r\n                <textarea\r\n                    id=\"text\"\r\n                    name=\"text\"\r\n                    placeholder=\"Write your tweet here\"\r\n                    onChange={props.set_Tweet}\r\n                    style={{ width: \"100%\" }}>\r\n\r\n                </textarea>\r\n                <button\r\n                    type=\"submit\"\r\n                    disabled={props.tweetForm.length > 0 ? false : true}\r\n                    style={{ float: \"right\" }}\r\n                >Post</button>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport { TweetBox }","\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\n//import { TweetBox } from \"./TweetBox\"\r\nimport TweetList from \"./TweetList\"\r\nimport { TweetBox } from './TweetBox';\r\n\r\n\r\nclass App extends Component {\r\n\r\n    constructor(args) {\r\n        super(args)\r\n\r\n        this.state = {\r\n            apiUrl: \"http://localhost/ApiReactjsTwitterPosts/\",\r\n            tweets: [],\r\n            tweet: \"\",\r\n\r\n        }\r\n        this.postTweet = this.postTweet.bind(this)\r\n        this.set_Tweet = this.set_Tweet.bind(this)\r\n        this.cargarValores = this.cargarValores.bind(this)\r\n        this.eliminar = this.eliminar.bind(this)\r\n        this.updateTweets = this.updateTweets.bind(this)\r\n\r\n    }\r\n    updateTweets(id, tweet, date) {\r\n\r\n        let array = this.state.tweets.filter(tweets => tweets.id !== id)\r\n\r\n        const objetoFinal = {\r\n            tweet: tweet,\r\n            id: id,\r\n            time: date\r\n        }\r\n\r\n        this.setState({\r\n            tweets: array.concat(objetoFinal)\r\n        })\r\n    \r\n    }\r\n\r\n    set_Tweet(e) {\r\n        const text = e.target.value\r\n\r\n        this.setState({\r\n            tweet: text\r\n        })\r\n\r\n\r\n    }\r\n\r\n    eliminar = (id) => {\r\n        const newDatas = this.state.tweets.filter(tweets => tweets.id !== id);\r\n\r\n        this.setState({ tweets: newDatas });\r\n    }\r\n\r\n    //permite cargar los tweets\r\n    cargarValores() {\r\n        axios\r\n            .get(this.state.apiUrl + \"gettweets.php\")\r\n            .then((response) => {\r\n                if (response.data.response === \"success\") {\r\n                    this.setState({\r\n                        tweets: response.data.result\r\n                    })\r\n\r\n                }\r\n\r\n            })\r\n            .catch((error) => (console.log(error)))\r\n    }\r\n    componentDidMount() {\r\n        this.cargarValores()\r\n    }\r\n\r\n    //funcion para enviar tweet\r\n    postTweet(e) {\r\n        e.preventDefault()\r\n        const form = e.target\r\n        var fd = new FormData()\r\n        fd.append(\"tweet\", form.text.value)\r\n\r\n\r\n        axios\r\n            .post(this.state.apiUrl + \"posttweet.php\", fd)\r\n            .then((response) => {\r\n                if (response.data.response === \"success\") {\r\n                    this.setState({\r\n                        tweets: this.state.tweets.concat({\r\n                            id: response.data.result.id,\r\n                            tweet: form.text.value,\r\n                            time: response.data.date\r\n                        })\r\n                    })\r\n                    form.reset()\r\n                } else {\r\n\r\n                    alert(\"Error: \" + response.data.result)\r\n\r\n                }\r\n\r\n            }).catch((error) => {\r\n                console.log(error)\r\n            })\r\n\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div style={{ width: \"400px\", margin: \"auto\" }}>\r\n                <h2>Twitter Feed</h2>\r\n\r\n                <TweetList\r\n                    tweets={this.state.tweets}\r\n                    apiUrl={this.state.apiUrl}\r\n                    eliminar={this.eliminar}\r\n                    updateTweets={this.updateTweets}\r\n                />\r\n                <TweetBox\r\n                    tweetForm={this.state.tweet}\r\n                    postTweet={this.postTweet}\r\n                    set_Tweet={this.set_Tweet}\r\n\r\n\r\n                />\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport { App };\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\n//import { BrowserRouter } from \"react-router-dom\";\n//import App from './App';\n//import App from './Componente2/App'\n//import App from './componente_carros/App'\nimport {App} from \"./Componente_twitter_post/App\"\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}